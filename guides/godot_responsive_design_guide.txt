================================================================================
                    GODOT RESPONSIVE DESIGN GUIDE
================================================================================

This guide explains how to create responsive layouts in Godot that adapt to 
different screen sizes, orientations, and devices.

================================================================================
1. CORE RESPONSIVE CONCEPTS
================================================================================

WHAT IS RESPONSIVE DESIGN?
- Layout adapts to different screen sizes automatically
- Content remains readable and accessible on all devices
- UI elements scale proportionally
- Maintains design integrity across devices

KEY PRINCIPLES:
1. Use relative positioning instead of fixed pixel values
2. Scale fonts and UI elements based on screen size
3. Use anchors and containers for flexible layouts
4. Implement dynamic calculations in scripts

================================================================================
2. GODOT LAYOUT SYSTEM BASICS
================================================================================

ANCHOR SYSTEM:
- Anchors define how a Control node positions relative to its parent
- Values from 0.0 to 1.0 (0 = left/top edge, 1 = right/bottom edge)

COMMON ANCHOR PRESETS:
- anchor_preset = 15: Fill entire parent (anchors: 0,0,1,1)
- anchor_preset = 8: Center (anchors: 0.5,0.5,0.5,0.5)
- anchor_preset = 7: Bottom center (anchors: 0.5,1,0.5,1)
- anchor_preset = 1: Top right (anchors: 1,0,1,0)

CONTAINER NODES:
- VBoxContainer: Arranges children vertically
- HBoxContainer: Arranges children horizontally
- MarginContainer: Adds consistent margins
- CenterContainer: Centers content

================================================================================
3. RESPONSIVE LAYOUT STRUCTURE
================================================================================

RECOMMENDED HIERARCHY:
```
Main Control (Full Screen)
├── Background (TextureRect with anchor_preset = 15)
├── Background Elements (Control with anchor_preset = 15)
│   ├── Shape1 (Panel/ColorRect with anchor positioning)
│   └── Shape2 (Panel/ColorRect with anchor positioning)
└── Content Container (VBoxContainer with margins)
    ├── Top Spacer (Control with size_flags_vertical = 3)
    ├── Main Content (VBoxContainer)
    │   ├── Title Section
    │   ├── Interactive Elements
    │   └── Buttons
    └── Bottom Spacer (Control with size_flags_vertical = 3)
```

LAYOUT MODES:
- layout_mode = 1: Use anchors and offsets
- layout_mode = 2: Use containers (recommended for content)

================================================================================
4. SCRIPT-BASED RESPONSIVE CALCULATIONS
================================================================================

BASIC SETUP IN _ready():
```gdscript
func _ready():
    setup_responsive_layout()

func _notification(what):
    if what == NOTIFICATION_RESIZED:
        call_deferred("setup_responsive_layout")
```

SCREEN SIZE DETECTION:
```gdscript
var screen_size = get_viewport().get_visible_rect().size
var scale_factor = min(screen_size.x / 720.0, screen_size.y / 1280.0)
```

RESPONSIVE FONT SCALING:
```gdscript
func update_label_font_size(node_path: String, font_size: float):
    var label = get_node(node_path)
    if label and label.label_settings:
        var new_settings = label.label_settings.duplicate()
        new_settings.font_size = int(font_size)
        label.label_settings = new_settings

# Usage:
var base_font_size = max(24, 32 * scale_factor)
update_label_font_size("UI/TitleLabel", base_font_size)
```

RESPONSIVE MARGINS:
```gdscript
var margin_x = max(20, screen_size.x * 0.1)  # 10% of width, min 20px
var margin_y = max(100, screen_size.y * 0.15) # 15% of height, min 100px

container.offset_left = margin_x
container.offset_right = -margin_x
container.offset_top = margin_y
container.offset_bottom = -margin_y
```

RESPONSIVE BUTTON SIZING:
```gdscript
var button_width = min(screen_size.x * 0.6, 300) # 60% of width, max 300px
var button_height = max(40, 50 * scale_factor)   # Scale height, min 40px
button.custom_minimum_size = Vector2(button_width, button_height)
```

================================================================================
5. CREATING CIRCULAR SHAPES RESPONSIVELY
================================================================================

PANEL + STYLEBOX METHOD:
1. Create Panel node instead of ColorRect
2. Create StyleBoxFlat resource with corner radius
3. Apply to panel's theme_override_styles/panel

DYNAMIC CIRCULAR SHAPES:
```gdscript
func setup_circular_shapes():
    var shapes = [$Shape1, $Shape2, $Shape3]
    
    for shape in shapes:
        if shape:
            var size = shape.size
            var radius = min(size.x, size.y) / 2.0
            
            var style = shape.get_theme_stylebox("panel")
            if style:
                var new_style = style.duplicate()
                new_style.corner_radius_top_left = radius
                new_style.corner_radius_top_right = radius
                new_style.corner_radius_bottom_left = radius
                new_style.corner_radius_bottom_right = radius
                shape.add_theme_stylebox_override("panel", new_style)
```

SCENE SETUP FOR CIRCLES:
```
[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_Circle"]
bg_color = Color(1, 0, 0, 0.4)
corner_radius_top_left = 200
corner_radius_top_right = 200
corner_radius_bottom_right = 200
corner_radius_bottom_left = 200

[node name="Circle" type="Panel"]
theme_override_styles/panel = SubResource("StyleBoxFlat_Circle")
```

================================================================================
6. RESPONSIVE POSITIONING STRATEGIES
================================================================================

ANCHOR-BASED POSITIONING:
- Use anchors for relative positioning to screen edges
- Combine with offsets for fine-tuning
- Example: Bottom-right circle at 20% from edges

```
anchors_preset = 3  # Bottom right
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -300  # 300px from right edge
offset_top = -400   # 400px from bottom edge
```

PERCENTAGE-BASED SPACING:
```gdscript
# Dynamic positioning based on screen percentage
var shape_size = min(screen_size.x * 0.3, screen_size.y * 0.2)
var margin_from_edge = screen_size.x * 0.05  # 5% margin
```

================================================================================
7. TESTING RESPONSIVE DESIGN
================================================================================

PROJECT SETTINGS:
- Set base resolution (e.g., 720x1280 for mobile)
- Use "viewport" stretch mode with "expand" aspect
- Test with different orientations

TESTING WORKFLOW:
1. Test on base resolution (720x1280)
2. Test on smaller screens (360x640)
3. Test on larger screens (1080x1920)
4. Test landscape orientation
5. Test on different aspect ratios

COMMON ISSUES TO CHECK:
- Text remains readable at all sizes
- Buttons stay clickable and properly sized
- UI elements don't overlap
- Content doesn't go off-screen
- Shapes maintain proper proportions

================================================================================
8. BEST PRACTICES
================================================================================

DO:
✓ Use containers (VBox/HBox) for main layout structure
✓ Use anchors for background elements and decorative shapes
✓ Scale fonts based on screen size with minimum values
✓ Use percentage-based margins and spacing
✓ Test on multiple screen sizes during development
✓ Use size_flags for flexible container children
✓ Implement NOTIFICATION_RESIZED for real-time adaptation

DON'T:
✗ Use fixed pixel positions for main content
✗ Use fixed font sizes without scaling
✗ Ignore minimum size constraints
✗ Forget to test on different orientations
✗ Overlap critical UI elements
✗ Make touch targets too small on mobile

================================================================================
9. EXAMPLE: COMPLETE RESPONSIVE SETUP
================================================================================

SCENE STRUCTURE:
```
Authentication Page (Control, anchor_preset=15)
├── Background (TextureRect, anchor_preset=15)
├── BackgroundShapes (Control, anchor_preset=15)
│   ├── GreenCircle (Panel, anchored to top-right)
│   ├── YellowCircle (Panel, anchored to bottom-right)
│   └── RedCircle (Panel, anchored to bottom-left)
└── MainContent (VBoxContainer with margins)
    ├── TopSpacer (Control, size_flags_vertical=3)
    ├── GameTitle (VBoxContainer, size_flags_horizontal=4)
    ├── Spacer (Control, fixed height)
    ├── LoginButton (Button, size_flags_horizontal=4)
    └── BottomSpacer (Control, size_flags_vertical=3)
```

SCRIPT TEMPLATE:
```gdscript
extends Control

func _ready():
    setup_responsive_layout()

func _notification(what):
    if what == NOTIFICATION_RESIZED:
        call_deferred("setup_responsive_layout")

func setup_responsive_layout():
    var screen_size = get_viewport().get_visible_rect().size
    var scale_factor = min(screen_size.x / 720.0, screen_size.y / 1280.0)
    
    # Scale fonts
    update_fonts(scale_factor)
    
    # Adjust margins
    update_margins(screen_size)
    
    # Scale UI elements
    update_ui_elements(screen_size, scale_factor)
    
    # Update shapes
    setup_circular_shapes()

func update_fonts(scale_factor: float):
    # Implement font scaling logic
    pass

func update_margins(screen_size: Vector2):
    # Implement margin calculation logic
    pass

func update_ui_elements(screen_size: Vector2, scale_factor: float):
    # Implement UI element scaling logic
    pass
```

================================================================================
10. TROUBLESHOOTING COMMON ISSUES
================================================================================

ISSUE: "Function not found" error
SOLUTION: Define functions before calling them in GDScript

ISSUE: UI elements too small on large screens
SOLUTION: Add maximum size limits to scaling calculations

ISSUE: Text overlapping on small screens
SOLUTION: Implement minimum font sizes and better spacing

ISSUE: Shapes not perfectly circular
SOLUTION: Ensure corner_radius = min(width, height) / 2

ISSUE: Layout breaks on orientation change
SOLUTION: Implement NOTIFICATION_RESIZED properly

================================================================================
END OF GUIDE
================================================================================

This guide covers the responsive design techniques used in The Numbers Game
authentication page. Apply these principles to create layouts that work
beautifully across all devices and screen sizes.

For questions or improvements to this guide, refer to the implementation in:
- scenes/authentication_page/authentication_page.tscn
- scripts/authentication_scripts/authentication_page.gd
